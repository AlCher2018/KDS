https://www.codeproject.com/Articles/38291/Implement-Splash-Screen-with-WPF


        public static void Main(string[] args)
        {
            // splash
            Splasher.Splash = new SplashScreen.SplashScreen();
            Splasher.ShowSplash();
            //for (int i = 0; i < 5000; i += 1)
            //{
            //    MessageListener.Instance.ReceiveMessage(string.Format("Load module {0}", i));
            //    Thread.Sleep(1);
            //}
            //string fileName = (AppLib.IsAppVerticalLayout ? "Images/bg 3ver 1080x1920 splash.png" : "Images/bg 3hor 1920x1080 splash.png");
            //SplashScreen splashScreen = null;
            //SplashScreen splashScreen = new SplashScreen(fileName);
            //splashScreen.Show(true);

            MessageListener.Instance.ReceiveMessage("Инициализация журнала событий...");
            AppLib.InitAppLogger();

            AppLib.WriteLogInfoMessage("************  Start KDS Client (WPF) *************");
            AppLib.WriteLogInfoMessage("Версия файла {0}: {1}", GetAppFileName(), GetAppVersion());
            MessageListener.Instance.ReceiveMessage("Получение параметров окружения...");
            AppLib.WriteLogInfoMessage(GetEnvironmentString());

            // установить текущий каталог на папку с приложением
            string appDir = AppEnvironment.GetAppDirectory();
            if (System.IO.Directory.GetCurrentDirectory() != appDir)
            {
                AppLib.WriteLogInfoMessage("Текущий каталог изменен на папку приложения: " + appDir);
                System.IO.Directory.SetCurrentDirectory(appDir);
            }

            // check registration
            MessageListener.Instance.ReceiveMessage("Проверка защиты ПО...");
            if (ProtectedProgramm() == false) Environment.Exit(1);

            KDSWPFClient.App app = new KDSWPFClient.App();

            getAppLayout();

            // настройка приложения
            MessageListener.Instance.ReceiveMessage("Получение параметров приложения...");
            app.InitializeComponent();  // определенные в app.xaml

            setAppGlobalValues();  // для хранения в свойствах приложения (из config-файла или др.)
            AppLib.WriteLogInfoMessage("App settings from config file: " + CfgFileHelper.GetAppSettingsFromConfigFile());

            // создать каналы
            bool isSuccess;
            MessageListener.Instance.ReceiveMessage("Создание канала получения данных...");
            AppLib.WriteLogInfoMessage("Создаю клиента для работы со службой KDSService - START");
            AppDataProvider dataProvider = new AppDataProvider();
            isSuccess = dataProvider.CreateGetChannel();
            if (!isSuccess) AppLib.WriteLogErrorMessage("Ошибка создания Get-канала: " + dataProvider.ErrorMessage);

            MessageListener.Instance.ReceiveMessage("Создание канала установки данных...");
            isSuccess = dataProvider.CreateSetChannel();
            if (!isSuccess) AppLib.WriteLogErrorMessage("Ошибка создания Set-канала: " + dataProvider.ErrorMessage);
            AppLib.WriteLogInfoMessage("Создаю клиента для работы со службой KDSService - FINISH");

            // и получить словари и настройки от службы
            MessageListener.Instance.ReceiveMessage("Получаю словари и настройки от службы KDSService...");
            AppLib.WriteLogInfoMessage("Получаю словари и настройки от службы KDSService - START");
            isSuccess = dataProvider.SetDictDataFromService();
            if (!isSuccess) AppLib.WriteLogErrorMessage("Data provider error: " + dataProvider.ErrorMessage);
            AppLib.WriteLogInfoMessage("Получаю словари и настройки от службы KDSService - FINISH");

            AppPropsHelper.SetAppGlobalValue("AppDataProvider", dataProvider);

            // прочитать из config-а и сохранить в свойствах приложения режим КДС
            MessageListener.Instance.ReceiveMessage("Получаю из config-файла режим работы КДС...");
            KDSModeHelper.Init();

            // создать и сохранить в свойствах приложения служебные окна (ColorLegend, StateChange)
            AppPropsHelper.SetAppGlobalValue("ColorLegendWindow", new ColorLegend());  // окно легенды
            // окно изменения статуса
            AppPropsHelper.SetAppGlobalValue("StateChangeWindow", new StateChange());

            // основное окно приложения
            MessageListener.Instance.ReceiveMessage("Инициализация окна приложения...");
            MainWindow mainWindow = new MainWindow(args);
            app.Run(mainWindow);

            if (dataProvider != null) { dataProvider.Dispose(); dataProvider = null; }
            AppLib.WriteLogInfoMessage("************  End KDS Client (WPF)  *************");
        }  // Main()


        private static void setAppGlobalValues()
{
...            // таймаут открытия канала
            AppPropsHelper.SetAppGlobalValue("OpenTimeoutSeconds", 3);
}

    public class AppDataProvider: IDisposable
    {
        int openTimeoutSeconds = (int)AppPropsHelper.GetAppGlobalValue("OpenTimeoutSeconds", 1);
}

        public bool CreateGetChannel()
        {

                getBinding.OpenTimeout = new TimeSpan(0, 0, openTimeoutSeconds);
}

        public bool CreateSetChannel()
        {
                setBinding.OpenTimeout = new TimeSpan(0, 0, openTimeoutSeconds);
}

private void MainWindow_Loaded(object sender, RoutedEventArgs e)
{
...
    SplashScreen.Splasher.CloseSplash();
}